import{u as p,_ as w,e as a,o as c,c as d,a as t,F as u,f as b,t as l,d as g,x as k,P as B}from"./index-099da154.js";const h=p(),n={headers:{Authorization:`Bearer ${h.token}`}},f={name:"UserTable",data(){return{config:n,token:h.token,users:[]}},created(){this.fetchUsers()},methods:{async fetchUsers(){try{const e=await a.get("/api/user/all",n);this.users=e.data}catch(e){console.log("Error fetching Users: ",e)}},async sortById(){const e="userId";try{const s=await a.post("/api/user/customSort",{sorting:e},n);this.users=s.data}catch(s){console.log("Error fetching Users with desired sorting method:  ",{sorting:e}," - Error: ",s)}},async sortByUsername(){const e="username";try{const s=await a.post("/api/user/customSort",{sorting:e},n);this.users=s.data}catch(s){console.log("Error fetching Users with desired sorting method: ",{sorting:e}," - Error: ",s)}},async sortByFirst(){const e="firstname";try{const s=await a.post("/api/user/customSort",{sorting:e},n);this.users=s.data}catch(s){console.log("Error fetching Users with desired sorting method: ",{sorting:e}," - Error: ",s)}},async sortByLast(){const e="lastname";try{const s=await a.post("/api/user/customSort",{sorting:e},n);this.users=s.data}catch(s){console.log("Error fetching Users with desired sorting method: ",{sorting:e}," - Error: ",s)}},async sortByRole(){const e="role";try{const s=await a.post("/api/user/customSort",{sorting:e},n);this.users=s.data}catch(s){console.log("Error fetching Users with desired sorting method: ",{sorting:e}," - Error: ",s)}},async sortByLogin(){const e="login";try{const s=await a.post("/api/user/customSort",{sorting:e},n);this.users=s.data,this.users=s.data}catch(s){console.log("Error fetching Users with desired sorting method: ",{sorting:e}," - Error: ",s)}},async sortByIncidents(){const e="incidents";try{const s=await a.post("/api/user/customSort",{sorting:"incidents"},n);this.users=s.data}catch(s){console.log("Error fetching Users with desired sorting method: ",{sorting:e}," - Error: ",s)}},async sortByPasswordChanges(){const e="pwchanges";try{const s=await a.post("/api/user/customSort",{sorting:e},n);this.users=s.data}catch(s){console.log("Error fetching Users with desired sorting method: ",{sorting:e}," - Error: ",s)}},testMethod(){alert("Geht")},deleteUser(e){confirm("Do you really want to delete User with id: "+e)&&alert("Deleted")}}},_={class:"container-sm mt-3 border border-light-subtle rounded shadow p-4"},U={class:"table table-striped"},E=t("th",{scope:"col"},"Actions",-1),C=t("td",null,"Dummy",-1),x=t("td",null,"Dummy",-1),I={class:"dropdown"},L=t("button",{class:"btn btn-close-white dropdown-toggle",type:"button","data-bs-toggle":"dropdown","aria-expanded":"false"},null,-1),v={class:"dropdown-menu"},S=["onClick"];function P(e,s,y,D,m,o){return c(),d("div",_,[t("table",U,[t("thead",null,[t("tr",null,[t("th",{scope:"col",class:"clickable text-nowrap",onClick:s[0]||(s[0]=(...r)=>o.sortById&&o.sortById(...r))},"Id"),t("th",{scope:"col",class:"clickable text-nowrap",onClick:s[1]||(s[1]=(...r)=>o.sortByUsername&&o.sortByUsername(...r))},"Username"),t("th",{scope:"col",class:"clickable text-nowrap",onClick:s[2]||(s[2]=(...r)=>o.sortByFirst&&o.sortByFirst(...r))},"Firstname"),t("th",{scope:"col",class:"clickable text-nowrap",onClick:s[3]||(s[3]=(...r)=>o.sortByLast&&o.sortByLast(...r))},"Last"),t("th",{scope:"col",class:"clickable text-nowrap",onClick:s[4]||(s[4]=(...r)=>o.sortByRole&&o.sortByRole(...r))},"Role"),t("th",{scope:"col",class:"clickable text-nowrap",onClick:s[5]||(s[5]=(...r)=>o.sortByLogin&&o.sortByLogin(...r))},"Last Login"),t("th",{scope:"col",class:"clickable text-nowrap",onClick:s[6]||(s[6]=(...r)=>o.sortByIncidents&&o.sortByIncidents(...r))},"Assigned Incidents"),t("th",{scope:"col",class:"clickable text-nowrap",onClick:s[7]||(s[7]=(...r)=>o.sortByPasswordChanges&&o.sortByPasswordChanges(...r))},"Last Password Change"),E])]),t("tbody",null,[(c(!0),d(u,null,b(m.users,r=>(c(),d("tr",{key:r.id},[t("td",null,l(r.userId),1),t("td",null,l(r.username),1),t("td",null,l(r.firstname),1),t("td",null,l(r.lastname),1),t("td",null,l(r.highestAuthority),1),C,t("td",null,l(r.assignedIncidents),1),x,t("td",null,[t("div",I,[L,t("ul",v,[t("li",null,[t("a",{class:"dropdown-item bg-info clickable",onClick:s[8]||(s[8]=(...i)=>o.testMethod&&o.testMethod(...i))},"Edit")]),t("li",null,[t("a",{class:"dropdown-item bg-danger clickable",onClick:i=>o.deleteUser(r.userId)},"Delete",8,S)]),t("li",null,[t("a",{class:"dropdown-item bg-warning clickable",onClick:s[9]||(s[9]=(...i)=>o.testMethod&&o.testMethod(...i))},"Change Password")])])])])]))),128))])])])}const A=w(f,[["render",P]]),M={__name:"User_Overview_Admin_view",setup(e){return(s,y)=>(c(),d(u,null,[g(k),g(B,{msg:"Users"}),g(A)],64))}};export{M as default};
